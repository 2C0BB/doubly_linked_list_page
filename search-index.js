var searchIndex = new Map(JSON.parse('[\
["doubly_linked_list",{"doc":"A doubly linked list capable of pushing and popping nodes …","t":"FFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["List","ListIntoIterator","ListIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","drop","extend","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","len","new","next","next","next_back","next_back","peek_end","peek_start","pop_end","pop_start","push_end","push_start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"doubly_linked_list"],[45,"core::iter::traits::collect"],[46,"core::fmt"],[47,"core::fmt"],[48,"core::result"],[49,"core::any"]],"d":["A doubly linked list capable of pushing and popping nodes …","An iterator over the elements of a <code>List</code>.","An iterator over borrowed elements of a <code>List</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if the <code>List</code> in O(1) time.","Returns an iterator over the borrowed elements of the <code>List</code>.","Returns the length of the <code>List</code> in O(1) time.","creates an empty <code>List</code>.","","","","","Returns a reference to the last element in the <code>List</code> or <code>None</code>…","Returns a reference to the first element in the <code>List</code> or …","Returns the last element in the <code>List</code>, removing it from the …","Returns the first element in the <code>List</code>, removing it from …","Adds a new node to the end of a <code>List</code> in O(1) time.","Adds a new node to the start of a <code>List</code> in O(1) time.","","","","","","","","",""],"i":[0,0,0,11,9,1,11,9,1,1,1,1,1,11,9,1,11,9,1,11,9,1,1,1,1,1,11,9,11,9,1,1,1,1,1,1,11,9,1,11,9,1,11,9,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[[1,[-1]]],2,[]],[[[1,[-1]],-2],2,[],[[4,[],[[3,[-1]]]]]],[[[1,[-1]],5],6,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-2,[],[]],[[[1,[-1]]],8,[]],[[[1,[-1]]],[[9,[-1]]],[]],[[[1,[-1]]],10,[]],[[],[[1,[-1]]],[]],[[[11,[-1]]],[[12,[-2]]],[],[]],[[[9,[-1]]],[[12,[-2]]],[],[]],[[[11,[-1]]],[[12,[-2]]],[],[]],[[[9,[-1]]],[[12,[-2]]],[],[]],[[[1,[-1]]],[[12,[-1]]],[]],[[[1,[-1]]],[[12,[-1]]],[]],[[[1,[-1]]],[[12,[-1]]],[]],[[[1,[-1]]],[[12,[-1]]],[]],[[[1,[-1]],-1],2,[]],[[[1,[-1]],-1],2,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]]],"c":[],"p":[[5,"List",0],[1,"tuple"],[17,"Item"],[10,"IntoIterator",45],[5,"Formatter",46],[8,"Result",46],[10,"Debug",46],[1,"bool"],[5,"ListIter",0],[1,"usize"],[5,"ListIntoIterator",0],[6,"Option",47],[6,"Result",48],[5,"TypeId",49]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
